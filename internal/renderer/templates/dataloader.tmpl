{{define "dataloader.tmpl"}}
    {{- /*gotype:github.com/debugger84/sqlc-dataloader/internal/renderer.DataLoaderTplData*/ -}}
    package {{.Package}}

    import (
    {{ range .Imports -}}
        {{ .Format }}
    {{ end -}}
    )

    type {{ .Struct.Type.TypeName }}Loader struct {
        innerLoader *dataloader.Loader[{{ .PrimaryKeyFieldType}}, {{ .Struct.Type.TypeWithPackage }}]
        db {{if ne .Struct.Type.PackageName "" }}{{ .Struct.Type.PackageName}}.DBTX{{ else }}DBTX{{ end }}
    }

    func New{{ .Struct.Type.TypeName }}Loader(db {{if ne .Struct.Type.PackageName "" }}{{ .Struct.Type.PackageName}}.DBTX{{ else }}DBTX{{ end }}) *{{ .Struct.Type.TypeName }}Loader {
        return &{{ .Struct.Type.TypeName }}Loader{
            db: db,
        }
    }

    func (l *{{ .Struct.Type.TypeName }}Loader) getInnerLoader() *dataloader.Loader[{{ .PrimaryKeyFieldType}}, {{ .Struct.Type.TypeWithPackage }}] {
        if l.innerLoader == nil {
            l.innerLoader = dataloader.NewBatchedLoader(
                func(ctx context.Context, keys []{{ .PrimaryKeyFieldType}}) []*dataloader.Result[{{ .Struct.Type.TypeWithPackage }}] {
                    {{ lowerTitle .Struct.Type.TypeName }}Map, err := l.findItemsMap(ctx, keys)

                    result := make([]*dataloader.Result[{{ .Struct.Type.TypeWithPackage }}], len(keys))
                    for i, key := range keys {
                        if err != nil {
                            result[i] = &dataloader.Result[{{ .Struct.Type.TypeWithPackage }}]{Error: err}
                            continue
                        }

                        if loadedItem, ok := {{ lowerTitle .Struct.Type.TypeName }}Map[key]; ok {
                            result[i] = &dataloader.Result[{{ .Struct.Type.TypeWithPackage }}]{Data: loadedItem}
                        } else {
                            result[i] = &dataloader.Result[{{ .Struct.Type.TypeWithPackage }}]{Error: pgx.ErrNoRows}
                        }
                    }
                    return result
                },
            )
        }
        return l.innerLoader
    }


    func (l *{{ .Struct.Type.TypeName }}Loader) findItemsMap(ctx context.Context, keys []{{ .PrimaryKeyFieldType}}) (map[{{ .PrimaryKeyFieldType}}]{{ .Struct.Type.TypeWithPackage }}, error) {
        res := make(map[{{ .PrimaryKeyFieldType}}]{{ .Struct.Type.TypeWithPackage }}, len(keys))

        query := `SELECT * FROM {{ .Struct.FullTableName }} WHERE {{ .PrimaryKeyColumnName}} = ANY($1)`
        rows, err := l.db.Query(ctx, query, keys)
        if err != nil {
            return nil, err
        }
        defer rows.Close()
        for rows.Next() {
            var result {{ .Struct.Type.TypeWithPackage }}
            err := rows.Scan(
            {{ range .Struct.Fields -}}
                &result.{{ .Name }},
            {{ end -}}
            )
            if err != nil {
                return nil, err
            }
            res[result.{{ .PrimaryKeyFieldName}}] = result
        }
        return res, nil
    }

    func (l *{{ .Struct.Type.TypeName }}Loader) Load(ctx context.Context, {{ lowerTitle .Struct.Type.TypeName }}Key {{ .PrimaryKeyFieldType}}) ({{ .Struct.Type.TypeWithPackage }}, error) {
        return l.getInnerLoader().Load(ctx, {{ lowerTitle .Struct.Type.TypeName }}Key)()
    }

{{end}}
